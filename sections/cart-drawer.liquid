{% comment %}
  Cart drawer section for Nike theme
{% endcomment %}

<div class="cart-drawer" id="cart-drawer">
  <div class="cart-drawer-overlay"></div>
  <div class="cart-drawer-content">
    <div class="cart-drawer-header">
      <h2 class="cart-drawer-title">Shopping Cart</h2>
      <button class="cart-drawer-close" aria-label="Close cart">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
    
    <div class="cart-drawer-body">
      <div class="cart-items" id="cart-items">
        {% if cart.items.size > 0 %}
          {% for item in cart.items %}
            <div class="cart-item" data-key="{{ item.key }}">
              <div class="cart-item-image">
                <img src="{{ item.image | img_url: '80x80' }}" alt="{{ item.title }}" loading="lazy">
              </div>
              <div class="cart-item-details">
                <h3 class="cart-item-title">{{ item.product.title }}</h3>
                <p class="cart-item-variant">{{ item.variant.title }}</p>
                <div class="cart-item-price">{{ item.price | money }}</div>
                <div class="cart-item-quantity">
                  <button class="quantity-btn quantity-decrease" data-key="{{ item.key }}" aria-label="Decrease quantity">-</button>
                  <input type="number" class="quantity-input" value="{{ item.quantity }}" min="1" data-key="{{ item.key }}" readonly>
                  <button class="quantity-btn quantity-increase" data-key="{{ item.key }}" aria-label="Increase quantity">+</button>
                </div>
              </div>
              <button class="cart-item-remove" data-key="{{ item.key }}" aria-label="Remove item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="3,6 5,6 21,6"></polyline>
                  <path d="m19,6v14a2,2 0,0 1,-2,2H7a2,2 0,0 1,-2,-2V6m3,0V4a2,2 0,0 1,2,-2h4a2,2 0,0 1,2,2v2"></path>
                </svg>
              </button>
            </div>
          {% endfor %}
        {% else %}
          <div class="cart-empty">
            <div class="cart-empty-icon">
              <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                <circle cx="9" cy="21" r="1"></circle>
                <circle cx="20" cy="21" r="1"></circle>
                <path d="m1,1h4l2.68,13.39a2,2 0,0 0,2,1.61h9.72a2,2 0,0 0,2,-1.61L23,6H6"></path>
              </svg>
            </div>
            <h3>Your cart is empty</h3>
            <p>Discover our latest Nike collections and add some items to your cart.</p>
            <a href="/collections/all" class="btn btn-primary">Shop Now</a>
          </div>
        {% endif %}
      </div>
    </div>
    
    {% if cart.items.size > 0 %}
      <div class="cart-drawer-footer">
        <div class="cart-subtotal">
          <span>Subtotal:</span>
          <span class="cart-subtotal-amount">{{ cart.total_price | money }}</span>
        </div>
        <div class="cart-actions">
          <button class="btn btn-secondary cart-update" disabled>Update Cart</button>
          <a href="/cart" class="btn btn-primary">View Cart</a>
          <form action="/cart" method="post" novalidate>
            <button type="submit" name="add" class="btn btn-nike cart-checkout">
              Checkout
            </button>
          </form>
        </div>
        <div class="cart-note">
          <label for="cart-note">Add a note to your order:</label>
          <textarea id="cart-note" name="note" placeholder="Special instructions...">{{ cart.note }}</textarea>
        </div>
      </div>
    {% endif %}
  </div>
</div>

<style>
  .cart-drawer {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    visibility: hidden;
    opacity: 0;
    transition: all 0.3s ease;
  }

  .cart-drawer.active {
    visibility: visible;
    opacity: 1;
  }

  .cart-drawer-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    cursor: pointer;
  }

  .cart-drawer-content {
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    max-width: 400px;
    height: 100%;
    background: var(--nike-white);
    box-shadow: -5px 0 25px rgba(0, 0, 0, 0.2);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .cart-drawer.active .cart-drawer-content {
    transform: translateX(0);
  }

  .cart-drawer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid var(--nike-light-gray);
  }

  .cart-drawer-title {
    font-family: var(--heading-font);
    font-weight: 700;
    font-size: 1.5rem;
    color: var(--nike-black);
  }

  .cart-drawer-close {
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    color: var(--nike-black);
    transition: color 0.3s ease;
  }

  .cart-drawer-close:hover {
    color: var(--nike-red);
  }

  .cart-drawer-body {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
  }

  .cart-item {
    display: flex;
    gap: 15px;
    padding: 15px 0;
    border-bottom: 1px solid var(--nike-light-gray);
    position: relative;
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  .cart-item-image {
    flex-shrink: 0;
    width: 80px;
    height: 80px;
    border-radius: 8px;
    overflow: hidden;
    background: var(--nike-light-gray);
  }

  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .cart-item-details {
    flex: 1;
  }

  .cart-item-title {
    font-family: var(--heading-font);
    font-weight: 600;
    font-size: 0.9rem;
    color: var(--nike-black);
    margin: 0 0 5px 0;
  }

  .cart-item-variant {
    font-size: 0.8rem;
    color: var(--nike-gray);
    margin: 0 0 10px 0;
  }

  .cart-item-price {
    font-family: var(--heading-font);
    font-weight: 700;
    color: var(--nike-red);
    margin: 0 0 10px 0;
  }

  .cart-item-quantity {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .quantity-btn {
    width: 30px;
    height: 30px;
    border: 1px solid var(--nike-light-gray);
    background: var(--nike-white);
    color: var(--nike-black);
    cursor: pointer;
    border-radius: 4px;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .quantity-btn:hover {
    background: var(--nike-black);
    color: var(--nike-white);
  }

  .quantity-input {
    width: 40px;
    height: 30px;
    text-align: center;
    border: 1px solid var(--nike-light-gray);
    border-radius: 4px;
    font-weight: 600;
  }

  .cart-item-remove {
    position: absolute;
    top: 10px;
    right: 0;
    background: none;
    border: none;
    color: var(--nike-gray);
    cursor: pointer;
    padding: 5px;
    transition: color 0.3s ease;
  }

  .cart-item-remove:hover {
    color: var(--nike-red);
  }

  .cart-empty {
    text-align: center;
    padding: 60px 20px;
  }

  .cart-empty-icon {
    margin: 0 0 20px 0;
    color: var(--nike-gray);
  }

  .cart-empty h3 {
    font-family: var(--heading-font);
    font-weight: 700;
    color: var(--nike-black);
    margin: 0 0 15px 0;
  }

  .cart-empty p {
    color: var(--nike-gray);
    margin: 0 0 30px 0;
  }

  .cart-drawer-footer {
    padding: 20px;
    border-top: 1px solid var(--nike-light-gray);
    background: var(--nike-white);
  }

  .cart-subtotal {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 0 0 20px 0;
    font-family: var(--heading-font);
    font-weight: 700;
    font-size: 1.2rem;
  }

  .cart-subtotal-amount {
    color: var(--nike-red);
  }

  .cart-actions {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin: 0 0 20px 0;
  }

  .cart-actions .btn {
    width: 100%;
    justify-content: center;
  }

  .cart-note {
    margin-top: 20px;
  }

  .cart-note label {
    display: block;
    margin: 0 0 8px 0;
    font-weight: 600;
    color: var(--nike-black);
  }

  .cart-note textarea {
    width: 100%;
    height: 60px;
    padding: 10px;
    border: 1px solid var(--nike-light-gray);
    border-radius: 4px;
    resize: vertical;
    font-family: var(--body-font);
  }

  .cart-note textarea:focus {
    outline: none;
    border-color: var(--nike-black);
  }

  /* Loading state */
  .cart-loading {
    opacity: 0.6;
    pointer-events: none;
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .cart-drawer-content {
      max-width: 100%;
    }
  }
</style>

<script>
  class CartDrawer {
    constructor() {
      this.drawer = document.getElementById('cart-drawer');
      this.overlay = this.drawer.querySelector('.cart-drawer-overlay');
      this.closeBtn = this.drawer.querySelector('.cart-drawer-close');
      this.cartItems = document.getElementById('cart-items');
      
      this.init();
    }

    init() {
      // Close cart drawer events
      this.closeBtn.addEventListener('click', () => this.close());
      this.overlay.addEventListener('click', () => this.close());
      
      // Quantity change events
      this.cartItems.addEventListener('click', (e) => {
        if (e.target.classList.contains('quantity-increase')) {
          this.updateQuantity(e.target.dataset.key, 1);
        } else if (e.target.classList.contains('quantity-decrease')) {
          this.updateQuantity(e.target.dataset.key, -1);
        } else if (e.target.classList.contains('cart-item-remove')) {
          this.removeItem(e.target.dataset.key);
        }
      });

      // ESC key to close
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.drawer.classList.contains('active')) {
          this.close();
        }
      });
    }

    open() {
      this.drawer.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.drawer.classList.remove('active');
      document.body.style.overflow = '';
    }

    updateQuantity(key, change) {
      const item = this.cartItems.querySelector(`[data-key="${key}"]`);
      const input = item.querySelector('.quantity-input');
      const currentQuantity = parseInt(input.value);
      const newQuantity = Math.max(1, currentQuantity + change);
      
      if (newQuantity !== currentQuantity) {
        this.updateCart(key, newQuantity);
      }
    }

    removeItem(key) {
      this.updateCart(key, 0);
    }

    updateCart(key, quantity) {
      this.drawer.classList.add('cart-loading');
      
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: key,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(data => {
        this.refreshCart();
      })
      .catch(error => {
        console.error('Error updating cart:', error);
        this.drawer.classList.remove('cart-loading');
      });
    }

    refreshCart() {
      fetch('/cart?view=drawer')
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newCartItems = doc.getElementById('cart-items');
          
          if (newCartItems) {
            this.cartItems.innerHTML = newCartItems.innerHTML;
          }
          
          this.drawer.classList.remove('cart-loading');
        })
        .catch(error => {
          console.error('Error refreshing cart:', error);
          this.drawer.classList.remove('cart-loading');
        });
    }
  }

  // Initialize cart drawer when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    window.cartDrawer = new CartDrawer();
  });
</script>

{% schema %}
{
  "name": "Cart Drawer",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_cart_notes",
      "label": "Enable Cart Notes",
      "default": true
    },
    {
      "type": "text",
      "id": "empty_cart_message",
      "label": "Empty Cart Message",
      "default": "Your cart is empty"
    }
  ]
}
{% endschema %}